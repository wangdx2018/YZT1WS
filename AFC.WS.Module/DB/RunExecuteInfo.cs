//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.4927
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace AFC.WS.Model.DB
{
    using System;
    using System.Text;
    using System.Collections.Generic;

    using System.ComponentModel;
    
    /// <summary>
    /// 数据库表名称：run_execute_info
    /// </summary>
    public class RunExecuteInfo:INotifyPropertyChanged
    {
        
        /// <summary>
        /// 每个任务的执行id
        /// </summary>
        private string _run_task_id;
        
        /// <summary>
        /// 任务执行阶段：00：运营开始；01：运营结束
        /// </summary>
        private string _run_exec_phase;
        
        /// <summary>
        /// 调用函数接口名称
        /// </summary>
        private string _run_task_fun;
        
        /// <summary>
        /// 任务生效标志：00：任务生效；01：任务未生效
        /// </summary>
        private string _run_task_effect_flag;
        
        /// <summary>
        /// 00：执行成功；01：开始执行；02：执行失败；03：未执行状态
        /// </summary>
        private string _run_exec_status;
        
        /// <summary>
        /// 任务开始时间yyyymmddhhmmss
        /// </summary>
        private string _run_start_time;
        
        /// <summary>
        /// 任结束时间
        ///yyyymmddhhmmss
        ///
        /// </summary>
        private string _run_end_time;
        
        /// <summary>
        /// 下一个任务id，可用于子任务连续性检查
        /// </summary>
        private string _run_next_task;
        
        /// <summary>
        /// 是否允许该任务单独执行。00：允许单独执行；01：不允许单独执行
        ///
        /// </summary>
        private string _run_single_flag;
        
        /// <summary>
        /// 是否必须执行该任务。
        ///00：必须执行，若执行失败，则整个运营开始/运营结束失败；
        ///01：允许执行失败。不影响整个运营开始/运营结束的执行结果
        ///
        /// </summary>
        private string _if_must_run;
        
        /// <summary>
        /// 备注
        /// </summary>
        private string _remark_128;
        
        /// <summary>
        /// 每个任务的执行id
        /// </summary>
        public string run_task_id
        {
            get
            {
                return this._run_task_id;
            }
            set
            {
                this._run_task_id = value;
                HandleProperyChange("run_task_id");
            }
        }
        
        /// <summary>
        /// 任务执行阶段：00：运营开始；01：运营结束
        /// </summary>
        public string run_exec_phase
        {
            get
            {
                return this._run_exec_phase;
            }
            set
            {
                this._run_exec_phase = value;
                HandleProperyChange("run_exec_phase");
            }
        }
        
        /// <summary>
        /// 调用函数接口名称
        /// </summary>
        public string run_task_fun
        {
            get
            {
                return this._run_task_fun;
            }
            set
            {
                this._run_task_fun = value;
                HandleProperyChange("run_task_fun");
            }
        }
        
        /// <summary>
        /// 任务生效标志：00：任务生效；01：任务未生效
        /// </summary>
        public string run_task_effect_flag
        {
            get
            {
                return this._run_task_effect_flag;
            }
            set
            {
                this._run_task_effect_flag = value;
                HandleProperyChange("run_task_effect_flag");
            }
        }
        
        /// <summary>
        /// 00：执行成功；01：开始执行；02：执行失败；03：未执行状态
        /// </summary>
        public string run_exec_status
        {
            get
            {
                return this._run_exec_status;
            }
            set
            {
                this._run_exec_status = value;
                HandleProperyChange("run_exec_status");
            }
        }
        
        /// <summary>
        /// 任务开始时间yyyymmddhhmmss
        /// </summary>
        public string run_start_time
        {
            get
            {
                return this._run_start_time;
            }
            set
            {
                this._run_start_time = value;
                HandleProperyChange("run_start_time");
            }
        }
        
        /// <summary>
        /// 任结束时间
        ///yyyymmddhhmmss
        ///
        /// </summary>
        public string run_end_time
        {
            get
            {
                return this._run_end_time;
            }
            set
            {
                this._run_end_time = value;
                HandleProperyChange("run_end_time");
            }
        }
        
        /// <summary>
        /// 下一个任务id，可用于子任务连续性检查
        /// </summary>
        public string run_next_task
        {
            get
            {
                return this._run_next_task;
            }
            set
            {
                this._run_next_task = value;
                HandleProperyChange("run_next_task");
            }
        }
        
        /// <summary>
        /// 是否允许该任务单独执行。00：允许单独执行；01：不允许单独执行
        ///
        /// </summary>
        public string run_single_flag
        {
            get
            {
                return this._run_single_flag;
            }
            set
            {
                this._run_single_flag = value;
                HandleProperyChange("run_single_flag");
            }
        }
        
        /// <summary>
        /// 是否必须执行该任务。
        ///00：必须执行，若执行失败，则整个运营开始/运营结束失败；
        ///01：允许执行失败。不影响整个运营开始/运营结束的执行结果
        ///
        /// </summary>
        public string if_must_run
        {
            get
            {
                return this._if_must_run;
            }
            set
            {
                this._if_must_run = value;
                HandleProperyChange("if_must_run");
            }
        }
        
        /// <summary>
        /// 备注
        /// </summary>
        public string remark_128
        {
            get
            {
                return this._remark_128;
            }
            set
            {
                this._remark_128 = value;
                HandleProperyChange("remark_128");
            }
        }

        #region INotifyPropertyChanged 成员

        public event PropertyChangedEventHandler PropertyChanged;


        public void HandleProperyChange(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                PropertyChanged.Invoke(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion
    }
}
